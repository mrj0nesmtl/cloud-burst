name: Versioning and Release Management

# Add workflow-level permissions
permissions:
  contents: read # Base read permission for all jobs
  pull-requests: write # Needed for creating PRs
  issues: write # Needed for commenting on PRs

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  version-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version consistency
        run: |
          # Extract versions
          CHANGELOG_VERSION=$(grep -o '\[0\.1\.[0-9]*\]' CHANGELOG.md | head -1 | tr -d '[]')
          README_VERSION=$(grep -o 'version-[0-9.]*-blue' README.md | cut -d'-' -f2)
          
          echo "Found versions:"
          echo "CHANGELOG.md: $CHANGELOG_VERSION"
          echo "README.md: $README_VERSION"
          
          # Compare versions
          if [ "$CHANGELOG_VERSION" != "$README_VERSION" ]; then
            echo "‚ùå Version mismatch found!"
            echo "All versions must match CHANGELOG.md version: $CHANGELOG_VERSION"
            exit 1
          fi
          
          echo "‚úÖ All versions match: $CHANGELOG_VERSION"

      - name: Verify changelog
        run: |
          if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "‚ùå Error: CHANGELOG.md must contain an [Unreleased] section"
            exit 1
          fi
          echo "‚úÖ CHANGELOG.md format verified"

  version-bump:
    needs: version-check
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Update version
        id: bump_version
        run: |
          VERSION_TYPE=${{ github.event.inputs.version_type }}
          CURRENT_VERSION=$(grep -o '\[0\.1\.[0-9]*\]' CHANGELOG.md | head -1 | tr -d '[]')
          
          # Calculate new version
          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          major="${version_parts[0]}"
          minor="${version_parts[1]}"
          patch="${version_parts[2]}"
          
          case $VERSION_TYPE in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          NEW_VERSION="$major.$minor.$patch"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # Update README.md version badge
          sed -i "s/version-[0-9.]*-blue/version-${NEW_VERSION}-blue/" README.md
          
          # Update CHANGELOG.md
          DATE=$(date +%Y-%m-%d)
          sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [$NEW_VERSION] - $DATE/" CHANGELOG.md
          
          # Update version links in CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "[Unreleased]: https://github.com/${{ github.repository }}/compare/v$NEW_VERSION...HEAD" >> CHANGELOG.md
          echo "[$NEW_VERSION]: https://github.com/${{ github.repository }}/releases/tag/v$NEW_VERSION" >> CHANGELOG.md

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          title: 'üîñ chore(release): prepare release ${{ steps.bump_version.outputs.new_version }}'
          body: |
            # üöÄ Release Preparation v${{ steps.bump_version.outputs.new_version }}
            
            ## üìù Changes
            - Version bump in CHANGELOG.md
            - Updated version badge in README.md
            - Updated version links
            
            ## ‚úÖ Checklist
            - [ ] Review version numbers
            - [ ] Review CHANGELOG.md
            - [ ] Review documentation updates
            
            Please review the changes and merge if everything looks correct.
          branch: release/v${{ steps.bump_version.outputs.new_version }}
          base: main
          labels: release
          commit-message: 'chore(release): prepare release ${{ steps.bump_version.outputs.new_version }}'

  create-release:
    needs: version-bump
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version-bump.outputs.new_version }}
          release_name: Release v${{ needs.version-bump.outputs.new_version }}
          body: |
            See [CHANGELOG.md](CHANGELOG.md) for details.
          draft: false
          prerelease: false 